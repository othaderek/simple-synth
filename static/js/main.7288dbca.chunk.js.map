{"version":3,"sources":["components/Directions.js","components/Key.js","components/Keyboard.js","patches/sine.js","patches/triangle.js","patches/square.js","App.js","serviceWorker.js","index.js"],"names":["Directions","Key","className","id","this","props","note","Component","Keyboard","renderKeys","Object","keys","notesMap","map","key","handleKeydown","sine","Tone","PolySynth","Synth","oscillator","type","envelope","attack","decay","sustain","release","volume","toMaster","triangle","square","App","state","patch","octave","lastNote","handleKeyDown","e","patchOrOctave","synthKey","resetOctave","setState","repeat","triggerAttack","logKey","includes","document","querySelector","style","releaseNotes","triggerRelease","changeOctave","changePatch","patchMap","octaveDown","octaveUp","addEventListener","Boolean","window","location","hostname","match","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7288dbca.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Directions() {\n    return (\n        <div>\n            <div>Press 'z' to lower the octave you are in and 'x' raise it!</div>\n            <br></br>\n            <div>Press 1 for sine, 2 for triangle, 3 for square</div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport '../App.css'\n\nexport default class Key extends Component {\n    render() {\n        return (\n            <div className='key' id={`key-${this.props.note}`}>\n                {this.props.note}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Key from './Key'\n\nexport default class Keyboard extends Component {\n    render() {\n        const renderKeys = Object.keys(this.props.notesMap).map( key => {\n            return <Key note={key} key={key} handleKeydown={this.props.handleKeydown} />\n        })\n        return (\n            <div className='keyboard'>\n                {renderKeys}\n            </div>\n        )\n    }\n}\n","import Tone from 'tone'\n\nlet sine = new Tone.PolySynth(4, Tone.Synth, {\n    oscillator : {\n          type : \"sine\"\n    },\n    envelope : {\n    attack : 0.3 ,\n    decay : 0.1 ,\n    sustain : 0.3 ,\n    release : 0.05\n  },\n  volume: -10\n  }).toMaster();\n\n  export default sine","import Tone from 'tone'\n\nlet triangle = new Tone.PolySynth(4, Tone.Synth, {\n    oscillator : {\n          type : \"triangle\"\n    },\n    envelope : {\n      attack : 0.5 ,\n      decay : 0.1 ,\n      sustain : 0.3 ,\n      release : 0.05\n      },\n      volume: -10\n  }).toMaster();\n\n  export default triangle","import Tone from 'tone'\n\nlet square = new Tone.PolySynth(4, Tone.Synth, {\n    oscillator : {\n          type : \"square\"\n    },\n    envelope : {\n      attack : 0.5 ,\n      decay : 0.1 ,\n      sustain : 0.3 ,\n      release : 0.05\n      },\n    volume: -20\n  }).toMaster();\n\n  export default square","import React, { Component } from 'react'\nimport Directions from './components/Directions'\nimport Keyboard from './components/Keyboard'\nimport sine from './patches/sine'\nimport triangle from './patches/triangle'\nimport square from './patches/square'\nimport './App.css'\n\nexport default class App extends Component {\n\n  state = {\n    patch: sine,\n    octave: 4,\n    lastNote: 5,\n    notesMap: {\n      'a': null,\n      'w': null,\n      's': null,\n      'e': null,\n      'd': null,\n      'f': null,\n      't': null,\n      'g': null,\n      'y': null,\n      'h': null,\n      'u': null,\n      'j': null,\n      'k': null\n    }\n  }\n  \n  componentDidMount(){\n    this.resetOctave()\n\n    let handleKeyDown = (e) => {\n      (e.key === 'z' || e.key === 'x' || e.key === '1' || e.key === '2' || e.key === '3') ? this.patchOrOctave(e) : this.synthKey(e); \n    }\n\n    let handleKeyUp = (e) => {\n      this.releaseNotes(e)\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    document.addEventListener('keyup', handleKeyUp)\n    \n  }\n  handleKeyDown = (e) => {\n    (e.key === 'z' || e.key === 'x' || e.key === '1' || e.key === '2' || e.key === '3') ? this.patchOrOctave(e) : this.synthKey(e); \n  }\n  \n  resetOctave = () => {\n    this.setState({\n      notesMap:{\n        'a': `C${this.state.octave}`,\n        'w': `C#${this.state.octave}`,\n        's': `D${this.state.octave}`,\n        'e': `D#${this.state.octave}`,\n        'd': `E${this.state.octave}`,\n        'f': `F${this.state.octave}`,\n        't': `F#${this.state.octave}`,\n        'g': `G${this.state.octave}`,\n        'y': `G#${this.state.octave}`,\n        'h': `A${this.state.octave}`,\n        'u': `A#${this.state.octave}`,\n        'j': `B${this.state.octave}`,\n        'k': `C${this.state.lastNote}`\n      }\n    })\n  }\n  \n  \n  synthKey = (e) => {\n    return (e.repeat) ? null : this.state.patch.triggerAttack(this.state.notesMap[e.key]) && this.logKey(e); \n  }\n\n  logKey = (e) => {\n    if (Object.keys(this.state.notesMap).includes(e.key)){\n      let key = document.querySelector(`#key-${e.key}`)\n      key.style = \"background-color: grey;\"\n    }\n    \n  }\n  \n  \n  releaseNotes = (e) => {\n    if (Object.keys(this.state.notesMap).includes(e.key)){\n      this.state.patch.triggerRelease(this.state.notesMap[e.key]);\n      let key = document.querySelector(`#key-${e.key}`)\n      key.style = \"background-color: null;\"\n    }\n  }\n\n  patchOrOctave = (e) => {\n    (e.key === 'z' || e.key === 'x') ? this.changeOctave(e.key) : this.changePatch(e.key)\n  }\n\n  changePatch = (key) => {\n    this.releaseNotes(key)\n    let patchMap = {\n      '1': sine,\n      '2': triangle,\n      '3': square \n    }\n    this.setState({ patch: patchMap[key] })\n  }\n  \n  changeOctave = (key) => {\n    (key === 'z') ? this.octaveDown() : this.octaveUp();\n  }\n  \n  octaveUp = () => {\n    this.setState({\n      octave: this.state.octave + 1,\n      lastNote: this.state.lastNote + 1\n    })\n\n    this.resetOctave()\n  }\n  \n  octaveDown = () => {\n    this.setState({\n      octave: this.state.octave - 1,\n      lastNote: this.state.lastNote - 1\n    })\n\n    this.resetOctave()\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <Directions />\n        <Keyboard handleKeydown={this.handleKeyDown} notesMap={this.state.notesMap} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\n\n\n// Store -> Globalized State\n// Action -> What the thing you want done is called\n// Reducer -> The actual thing being done\n// Dispatch -> \nconst reducer = () => {\n    \n}\n\nconst store = createStore(reducer)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}